{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SimpleSchema from \"simpl-schema\";\nimport { useReactoForm, muiOptions } from \"reacto-form\";\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { CardMedia, Container, Typography, Grid, TextField } from \"@material-ui/core\";\nvar formSchema = new SimpleSchema({\n  firstName: {\n    type: String,\n    min: 4,\n    max: 15\n  },\n  lastName: {\n    type: String,\n    min: 4,\n    max: 15\n  },\n  email: {\n    type: String,\n    min: 4,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  password: {\n    type: String,\n    min: 8\n  },\n  verifypassword: {\n    type: String,\n    min: 8,\n    custom: function custom() {\n      if (this.value !== this.field('password').value) {\n        return \"passwordMismatch\";\n      }\n    }\n  },\n  gender: {\n    type: String,\n    required: true,\n    allowedValues: ['male', 'female', 'nongender']\n  }\n});\nvar validator = formSchema.getFormValidator(); //Style\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      marginTop: theme.spacing(4),\n      backgroundColor: \"#d5d5d5\",\n      color: \"#000\",\n      padding: theme.spacing(6),\n      borderRadius: \"4px\"\n    },\n    root: {\n      marginTop: \"16px\",\n      backgroundColor: \"#fff\",\n      borderRadius: \"4px\"\n    },\n    root2: {\n      margin: \"16px\",\n      backgroundColor: \"#fff\",\n      borderRadius: \"4px\"\n    },\n    textfield: {\n      width: \"100%\",\n      backgroundColor: \"#fff\"\n    },\n    formControl: {\n      width: \"100%\"\n    }\n  };\n});\nexport default function Menu() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      obgData = _React$useState2[0],\n      setObgData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      gender = _React$useState4[0],\n      setGender = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isShowing = _React$useState6[0],\n      setIsShowing = _React$useState6[1];\n\n  var handleChange = function handleChange(event) {\n    setGender(event.target.value);\n  }; // Validation submmit\n\n\n  var _useReactoForm = useReactoForm({\n    logErrorsOnSubmit: true,\n    // onChange: (val) => {\n    // \tconsole.log(\"onChangeForm\", val);\n    // },\n    // onChanging: (val) => {\n    // \tconsole.log(\"onChangingForm\", val);\n    // },\n    onSubmit: function onSubmit(formData) {\n      // console.log(\"onSubmitForm\", formData);\n      setObgData(formData);\n      setIsShowing(true);\n    },\n    validator: validator,\n    isReadOnly: false\n  }),\n      getFirstErrorMessage = _useReactoForm.getFirstErrorMessage,\n      getInputProps = _useReactoForm.getInputProps,\n      hasErrors = _useReactoForm.hasErrors,\n      submitForm = _useReactoForm.submitForm;\n\n  return /*#__PURE__*/_jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 8,\n      className: classes.container,\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h5\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Test form and validate inputs\"\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"Firstname\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsx(TextField, _objectSpread({\n            id: \"standard-basic\",\n            className: classes.textfield,\n            variant: \"filled\",\n            label: \"Please fill firstname\",\n            size: \"small\",\n            error: hasErrors([\"firstName\"]),\n            helperText: getFirstErrorMessage([\"firstName\"])\n          }, getInputProps(\"firstName\", muiOptions)))\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"LastName\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsx(TextField, _objectSpread({\n            className: classes.textfield,\n            type: \"tel\",\n            name: \"lastName\",\n            variant: \"filled\",\n            label: \"Please fill last name\",\n            size: \"small\",\n            error: hasErrors([\"lastName\"]),\n            helperText: getFirstErrorMessage([\"lastName\"])\n          }, getInputProps(\"lastName\", muiOptions)))\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"E-mail\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsx(TextField, _objectSpread({\n            className: classes.textfield,\n            variant: \"filled\",\n            label: \"Please fill e-mail\",\n            size: \"small\",\n            error: hasErrors([\"email\"]),\n            helperText: getFirstErrorMessage([\"email\"])\n          }, getInputProps(\"email\", muiOptions)))\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"Password\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsx(TextField, _objectSpread({\n            className: classes.textfield,\n            type: \"password\",\n            name: \"lastName\",\n            variant: \"filled\",\n            label: \"Please fill password\",\n            size: \"small\",\n            error: hasErrors([\"password\"]),\n            helperText: getFirstErrorMessage([\"password\"])\n          }, getInputProps(\"password\", muiOptions)))\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"Verify Password\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsx(TextField, _objectSpread({\n            className: classes.textfield,\n            type: \"password\",\n            name: \"lastName\",\n            variant: \"filled\",\n            label: \"Please fill verify password\",\n            size: \"small\",\n            error: hasErrors([\"verifypassword\"]),\n            helperText: getFirstErrorMessage([\"verifypassword\"])\n          }, getInputProps(\"verifypassword\", muiOptions)))\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            children: \"Gender\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsxs(FormControl, _objectSpread(_objectSpread({\n            className: classes.formControl\n          }, getInputProps(\"gender\", muiOptions)), {}, {\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              htmlFor: \"age-native-simple\",\n              children: \"Please select Gender\"\n            }), /*#__PURE__*/_jsxs(Select, {\n              value: gender,\n              onChange: handleChange,\n              children: [/*#__PURE__*/_jsx(\"option\", {\n                value: \"male\",\n                children: \"Male\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"female\",\n                children: \"Female\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"nongender\",\n                children: \"Non gender\"\n              })]\n            }), /*#__PURE__*/_jsx(FormHelperText, {\n              style: {\n                color: \"red\"\n              },\n              children: getFirstErrorMessage([\"gender\"])\n            })]\n          }))\n        })]\n      }), /*#__PURE__*/_jsx(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        style: {\n          marginTop: \"14px\",\n          width: \"100%\"\n        },\n        onClick: submitForm,\n        children: \"Submit\"\n      }), isShowing ? /*#__PURE__*/_jsxs(Grid, {\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          children: \"Result: \"\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          children: obgData.firstName\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          children: obgData.lastName\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          children: obgData.email\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          children: obgData.gender\n        })]\n      }) : /*#__PURE__*/_jsx(\"div\", {})]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}